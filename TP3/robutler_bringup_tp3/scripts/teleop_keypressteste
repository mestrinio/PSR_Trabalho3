#!/usr/bin/env python3
from colorama import Fore, Back
import rospy
from geometry_msgs.msg import Twist
import sys
import select
import os
from pynput import keyboard
import multiprocessing



if os.name == 'nt':
    import msvcrt
    import time
else:
    import tty
    import termios

BURGER_MAX_LIN_VEL = 0.22
BURGER_MAX_ANG_VEL = 2.84

WAFFLE_MAX_LIN_VEL = 1.0
WAFFLE_MAX_ANG_VEL = 1.0

LIN_VEL_STEP_SIZE = 0.2
ANG_VEL_STEP_SIZE = 0.2

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
    a    s    d
          x
                [   SPACE   ]
W to move forwards
S to full stop
X to Reverse
A or D to turn LEFT/RIGHT
T for TURBOOOOOOOOOOO

CTRL-C to exit
"""

e = """
Communications Failed
"""




def getKey():
    if os.name == 'nt':
        timeout = 0.1
        startTime = time.time()
        while (1):
            if msvcrt.kbhit():
                if sys.version_info[0] >= 3:
                    return msvcrt.getch().decode()
                else:
                    return msvcrt.getch()
            elif time.time() - startTime > timeout:
                return ''

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key


def vels(target_linear_vel, target_angular_vel):
    return "current:\t LINEAR vel %s\t ANGULAR vel %s " % (int(target_linear_vel/5), int(target_angular_vel/5))


def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min(input, output + slop)
    elif input < output:
        output = max(input, output - slop)
    else:
        output = input

    return output


def constrain(input, low, high):
    if input < low:
        input = low
    elif input > high:
        input = high
    else:
        input = input

    return input


def checkLinearLimitVelocity(vel):
    if turtlebot3_model == "burger":
        vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
        vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:
        vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel


def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":
        vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
        vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:
        vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)

    return vel

def on_press_queue(queue):  
    def on_press(key):
        try:
            queue.put(key.char)
        except AttributeError:
            pass
    return on_press

def on_release_queue(queue):
    def on_release(key):
        try:
            queue.put('n'+key.char)
        except AttributeError:
            pass
    return on_release

def keyboard_listener(queue):
    with keyboard.Listener(on_press=on_press_queue(queue),on_release=on_release_queue(queue)) as listener:
        listener.join()




if __name__ == "__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('turtlebot3_teleop')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)

    turtlebot3_model = rospy.get_param("model", "waffle")

    status = 0
    target_linear_vel = 0.0
    target_angular_vel = 0.0
    control_linear_vel = 0.0
    control_angular_vel = 0.0

    try:
        print(msg)
        while not rospy.is_shutdown():
            queue = multiprocessing.Manager().Queue()
            
            process = multiprocessing.Process(target=keyboard_listener,args=(queue,))
            process.start()
            while True:
                res = queue.get()
                print('AQUI           ',res)
                if res == 'w':
                    control_linear_vel = 1.0
                elif res == 'nw':
                    control_linear_vel = 0.0
                elif res == 's':
                    control_linear_vel = -1.0
                elif res == 'ns':
                    control_linear_vel = 0.0
                elif res == 'd':
                    control_angular_vel = -1.0
                elif res == 'nd':
                    control_angular_vel = 0.0
                elif res == 'a':
                    control_angular_vel = 1.0
                elif res == 'na':
                    control_angular_vel = 0.0
                elif res == 'q':
                    break
                    
                else:
                    pass
                if status == 20:
                    print(msg)
                    status = 0

                twist = Twist()
                print('ANGULAR           ',control_angular_vel)
                print('LINEAR         ',control_linear_vel)
                twist.linear.x = control_linear_vel
                twist.linear.y = 0.0
                twist.linear.z = 0.0
                
                twist.angular.x = 0.0
                twist.angular.y = 0.0
                twist.angular.z = control_angular_vel
    
                pub.publish(twist)

            process.terminate()
            print('terminatings')
            break

                    
                
                        
            #if keyboard.is_pressed("w") and keyboard.is_pressed("d"):
            #    target_angular_vel = 0.5
            #    target_linear_vel = 0.5
            #    status = status + 1
            #    print(vels(target_linear_vel, target_angular_vel))
            #if key == 't':
            #    target_linear_vel = 1.5
            #    status = status + 1
            #elif key == 'x':
            #    target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
            #    status = status + 1
            #    print(vels(target_linear_vel, target_angular_vel))
            #elif key == 'a':
            #    target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
            #    status = status + 1
            #    print(vels(target_linear_vel, target_angular_vel))
            #elif key == 'd':
            #    target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
            #    status = status + 1
            #    print(vels(target_linear_vel, target_angular_vel))
            #elif key == ' ' or key == 's' or key == None:
            #    target_linear_vel = 0.0
            #    control_linear_vel = 0.0
            #    target_angular_vel = 0.0
            #    control_angular_vel = 0.0
            #    print(vels(target_linear_vel, target_angular_vel))
            #elif key == 'm':   #para a velocidade angular mas continuar a linear
            #    target_angular_vel = 0.0
            #    print(vels(target_linear_vel, target_angular_vel))

            #else:
            #    target_linear_vel = 0.0
            #    control_linear_vel = 0.0
            #    target_angular_vel = 0.0
            #    control_angular_vel = 0.0
                #if (key == '\x03'):
                #break



    except ValueError:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0.0
        twist.linear.y = 0.0
        twist.linear.z = 0.0
        twist.angular.x = 0.0
        twist.angular.y = 0.0
        twist.angular.z = 0.0
        pub.publish(twist)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
