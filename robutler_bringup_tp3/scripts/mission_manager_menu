#!/usr/bin/env python3

from datetime import datetime
import rospy
from functools import partial
from interactive_markers.interactive_marker_server import *
from interactive_markers.menu_handler import *
from visualization_msgs.msg import *
from geometry_msgs.msg import Pose, Point, Quaternion, PoseStamped
from tf.transformations import quaternion_from_euler
from move_base_msgs.msg import MoveBaseActionResult
from std_msgs.msg import String, Header
import os
from rospkg import RosPack
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
import cv2
from visualization_msgs.msg import Marker
from color_detection_copy import ObjectDetectionNode
#from ultralytics import YOLO



server = None
marker_pos = 1
menu_handler = MenuHandler()
h_first_entry = 0
h_second_entry = 0 ###
h_third_entry = 0 ###
h_fourth_entry = 0 ####
h_fifth_entry = 0 #### 
h_mode_last = 0

current_mission_marker = None



def enableCb(feedback):
    handle = feedback.menu_entry_id
    state = menu_handler.getCheckState(handle)

    if state == MenuHandler.CHECKED:
        menu_handler.setCheckState(handle, MenuHandler.UNCHECKED)
        rospy.loginfo("Hiding first menu entry")
        menu_handler.setVisible(h_first_entry, False)
    else:
        menu_handler.setCheckState(handle, MenuHandler.CHECKED)
        rospy.loginfo("Showing first menu entry")
        menu_handler.setVisible(h_first_entry, True)

    menu_handler.reApply(server)
    rospy.loginfo("update")
    server.applyChanges()


def modeCb(feedback):
    global h_mode_last
    menu_handler.setCheckState(h_mode_last, MenuHandler.UNCHECKED)
    h_mode_last = feedback.menu_entry_id
    menu_handler.setCheckState(h_mode_last, MenuHandler.CHECKED)

    rospy.loginfo("Switching to menu entry #" + str(h_mode_last))
    menu_handler.reApply(server)
    print("DONE")
    server.applyChanges()


def makeBox(msg):
    marker = Marker()

    marker.type = Marker.SPHERE
    marker.scale.x = msg.scale * 0.45
    marker.scale.y = msg.scale * 0.45
    marker.scale.z = msg.scale * 0.45
    marker.color.r = 0.5
    marker.color.g = 0.5
    marker.color.b = 0.5
    marker.color.a = 0.2

    return marker


def makeBoxControl(msg):
    control = InteractiveMarkerControl()
    control.always_visible = True
    control.markers.append(makeBox(msg))
    msg.controls.append(control)
    return control


def makeEmptyMarker(dummyBox=True):
    global marker_pos
    int_marker = InteractiveMarker()
    int_marker.header.frame_id = "base_link"
    int_marker.pose.position.z = marker_pos
    marker_pos += 1
    int_marker.scale = 1
    return int_marker


def makeMenuMarker(name):
    int_marker = makeEmptyMarker()
    int_marker.name = name

    control = InteractiveMarkerControl()

    control.interaction_mode = InteractiveMarkerControl.BUTTON
    control.always_visible = True

    control.markers.append(makeBox(int_marker))
    int_marker.controls.append(control)

    server.insert(int_marker)

def makeTextMarker(name, text, frame_id="base_link"):
    int_marker = InteractiveMarker()
    int_marker.header.frame_id = frame_id
    int_marker.name = name

    text_marker = Marker()
    text_marker.type = Marker.TEXT_VIEW_FACING
    text_marker.text = text
    text_marker.pose.position.z = 1.10 # Adjust the height of the text
    text_marker.scale.z = 0.4
    text_marker.color.r = 0.0
    text_marker.color.g = 0.0
    text_marker.color.b = 0.0
    text_marker.color.a = 1.0

    control = InteractiveMarkerControl()
    control.markers.append(text_marker)
    control.always_visible = True
    int_marker.controls.append(control)

    return int_marker, text_marker



def deepCb(feedback):
    rospy.loginfo("The deep sub-menu has been found.")


def updateMissionDescription(mission_name, mission_location, complete_message=None):
    global current_mission_marker

    # If a completion message is provided, display it
    if complete_message:
        # Remove the current mission text marker if exists
        if current_mission_marker:
            server.erase(current_mission_marker.name)
            server.applyChanges()

        # Create a new text marker for the completion message
        mission_text_marker_complete, _ = makeTextMarker("text_mission_complete", complete_message)
        mission_text_marker_complete.pose.position.z = 1.5  # Adjust the height of the completion message
        server.insert(mission_text_marker_complete)
        server.applyChanges()

        # Update the global variable
        current_mission_marker = mission_text_marker_complete
    else:
        # Remove the current mission text marker if exists
        if current_mission_marker:
            server.erase(current_mission_marker.name)
            server.applyChanges()

        # Create a new text marker for the mission description
        mission_text_marker, _ = makeTextMarker("text_mission_description", mission_name)
        mission_text_marker.pose.position.z = 1  # Adjust the height of the text

        # Insert the new mission text marker
        server.insert(mission_text_marker)
        server.applyChanges()

        # Update the global variable
        current_mission_marker = mission_text_marker
    

class CameraListener:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data):
        if hasattr(self, 'image_saved') and not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "photos")                            
                
                timestamp = datetime.now()
                
                # Format timestamp
                timestamp_formatted = timestamp.strftime("%d-%m-%Y_%H-%M-%S")            
                
                file_name = f"Photo_of_{self.location}_{timestamp_formatted}.jpg"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))

class CameraListener2:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data,file_nmbr):
        if hasattr(self, 'image_saved') and not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "person_laptop")                            
                if file_nmbr == 1:                
                    file_name = "Person1.png"
                elif file_nmbr == 2:
                    file_name = "Person2.png"
                else:
                    file_name = "Person3.png"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))

class CameraListener3:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data):
        if hasattr(self, 'image_saved') and not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "table_photos")                                          
                file_name = "Table_photo_2.png"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))

class CameraListener4:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data):
        if hasattr(self, 'image_saved') and not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "person_laptop")                                          
                file_name = "laptop.png"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))



def takeAPicture(feedback, x, y, z, R, P, Y, location, goal_publisher, camera_listener):
    print('First, moving to ' + location)
    updateMissionDescription("Moving to the {} to take a picture".format(location), mission_location=location)
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal move to ' + location)
    goal_publisher.publish(ps)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=80)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    #UpdateMissionDescription("Mission complete!! Uff")
    print('move base completed goal with result ' + str(result_msg))

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location)

    complete_message = "Mission complete!! Picture taken sucessfully!!"
    updateMissionDescription(complete_message, mission_location=location)
    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(5)
    
    # Perform any additional processing or mission planning logic
    print("Mission planning logic after taking a picture.")
    return


    # Optionally, signal shutdown
    #rospy.signal_shutdown("Mission complete. Shutting down.")


def moveTo(feedback, x, y, z, R, P, Y, location, goal_publisher):
    print('Called moving to ' + location)
    updateMissionDescription("Moving to the {}".format(location), mission_location=location)
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal move to ' + location)
    goal_publisher.publish(ps)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    print('move base completed goal with result ' + str(result_msg))
        
    complete_message = "Mission complete!! Uff"
    updateMissionDescription(complete_message, mission_location=location)

def searchForObject(feedback, x, y, z, R, P, Y, location, goal_publisher):
    #1 aligning myself for the picture
    #2 ficar certinho
    print('Called searching for objects in ' + location)
    updateMissionDescription("Searching for objects in the {}".format(location), mission_location=location)
    
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal to ' + location)
    goal_publisher.publish(ps)

    # TODO: Wait for move_base to finish
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=60)
    except:
        print('Timeout waiting for move_base')
        # TODO: Handle timeout
        return

    print('Move base completed goal with result ' + str(result_msg))
    
    # Start the object detection node
    duration = 5.0  # Set the duration for color detection
    object_detection_node = ObjectDetectionNode(duration)
    object_detection_node.start_detection()

    # Access the object count from the object detection node
    object_contours = object_detection_node.object_contours
    print("OBJETOS AQUI", object_contours)

    # Display the result in the mission description
    complete_message = f"Mission complete! Found {(object_contours)} objects in {location}."
    updateMissionDescription(complete_message, mission_location=location)

    # Optionally, perform additional logic after object detection
    print("Additional logic after object detection.")

    # Signal shutdown or proceed with the next mission
    # rospy.signal_shutdown("Mission complete. Shutting down.")
    return


#Search for person Yolo only
#def searchForPerson(feedback,goal_publisher, camera_listener):
    #MoveTo start
    location="kitchen"
    print('First, moving to ' + location)
    updateMissionDescription("Moving to the {} to see if someone is there".format(location), mission_location=location)
    p1 = Pose()
    p1.position = Point(x=3.172562, y=-0.001934, z=-0.001006)
    q1 = quaternion_from_euler(0, 0.003169, -0.292047)  # From euler angles (rpy) to quaternion
    p1.orientation = Quaternion(x=q1[0], y=q1[1], z=q1[2], w=q1[3])

    #1 localização

    ps1 = PoseStamped()
    ps1.pose = p1
    ps1.header = Header(frame_id='map', stamp=rospy.Time.now())  #Isto não é o path certo

    print('First looking in : ' + location)
    goal_publisher.publish(ps1)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    #UpdateMissionDescription("Mission complete!! Uff")
    print('move base completed goal with result ' + str(result_msg))

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location,file_nmbr=1)

    complete_message = "Completed my first trip, lets look in another place"
    updateMissionDescription(complete_message, mission_location=location)
    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(5)

    
    #2 localização

    location="living_room"
    print('Now checking : ' + location)
    updateMissionDescription("Moving to the {} to see if someone is there".format(location), mission_location=location)
    p2 = Pose()
    p2.position = Point(x=6.245474, y=-1.511837, z=-0.001006)
    q2 = quaternion_from_euler(0 , 0.003169, 2.786313)  # From euler angles (rpy) to quaternion
    p2.orientation = Quaternion(x=q2[0], y=q2[1], z=q2[2], w=q2[3])

    ps2 = PoseStamped()
    ps2.pose = p2
    ps2.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Now cheking : ' + location)
    goal_publisher.publish(ps2)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    #UpdateMissionDescription("Mission complete!! Uff")
    print('move base completed goal with result ' + str(result_msg))

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location,file_nmbr=2)


    complete_message = "I successfully analized this place aswell"
    updateMissionDescription(complete_message, mission_location=location)
    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(5)
    
    #3ª localização 
    location="bedroom"
    print('Now checking : ' + location)
    updateMissionDescription("Moving to the {} to see if someone is there".format(location), mission_location=location)
    p3 = Pose()
    p3.position = Point(x=-2.405233, y=-0.992072, z=-0.001006)
    q3 = quaternion_from_euler(0 , 0.003181, 2.740030)  # From euler angles (rpy) to quaternion
    p3.orientation = Quaternion(x=q3[0], y=q3[1], z=q3[2], w=q3[3])

    ps3 = PoseStamped()
    ps3.pose = p3
    ps3.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Lastly cheking for people in : ' + location)
    goal_publisher.publish(ps3)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    #UpdateMissionDescription("Mission complete!! Uff")
    print('move base completed goal with result ' + str(result_msg))

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location,file_nmbr=3)

    complete_message = "All the photos are taken, lets check results"
    updateMissionDescription(complete_message, mission_location=location)
    #Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(5)

    #Implementação do YOLO
    model = YOLO('yolov8n.pt')

    source1 = '../person_laptop/Person1.png'
    source2 = '../person_laptop/Person2.png'
    source3 = '../person_laptop/Person3.png'

    # Run inference on 'IMAGE1' with arguments
    model.predict(source1, save=True, imgsz=320, conf=0.5, save_txt = True)
    print('MODELO11111111111111111111111')
    rospy.sleep(1)
    model.predict(source2, save=True, imgsz=320, conf=0.5, save_txt = True)
    rospy.sleep(1)
    print('Modelo2"2222222222222222222')
    model.predict(source3, save=True, imgsz=320, conf=0.5, save_txt = True)
    rospy.sleep(1)
    print('MODELO3333333333333')

    has_people=[]
    rospy.sleep(3)
    
    path1 = "/home/mestre/catkin_ws/src/TP3/PSR_Trabalho3/robutler_bringup_tp3/person_laptop/runs/detect/predict/labels/Person1.txt"
    
    try:
        with open(path1) as f:
            c = f.read()
            if not c:
                has_people.append(False)
            elif c[0] != '0':
                has_people.append(False)
            else:
                has_people.append(True)
    except:
        has_people.append(False)
            
    
    path2 = "/home/mestre/catkin_ws/src/TP3/PSR_Trabalho3/robutler_bringup_tp3/person_laptop/runs/detect/predict/labels/Person2.txt"
    
    try:  
        with open(path2) as f:
            c = f.read()
            if not c:
                has_people.append(False)
            elif c[0] != '0':
                has_people.append(False)
            else:
                has_people.append(True)
    except:
        has_people.append(False)
        
        
    path3 = "/home/mestre/catkin_ws/src/TP3/PSR_Trabalho3/robutler_bringup_tp3/person_laptop/runs/detect/predict/labels/Person3.txt"
    
    try:
        with open(path3) as f:
            c = f.read()
            if not c:
                has_people.append(False)
            elif c[0] != '0':
                has_people.append(False)
            else:
                has_people.append(True)
    except:
        has_people.append(False)

    # Detections where? X,X,X
    print(has_people)

    complete_message = "According to my calculations..."
    updateMissionDescription(complete_message, mission_location=location)
    
    rospy.sleep(2)
    
    rooms = ['Kitchen','Living room','Bedroom']
    people_message = ""
    if any(people for people in has_people):
        for room, people in zip(rooms,has_people):
            people_message = people_message + "The {} has {} people \n".format(room,"" if people else "no")
            print(people_message)
            updateMissionDescription(people_message, mission_location=location)
            rospy.sleep(5)
    else:
        people_message = "There isn't anyone home!"
        updateMissionDescription(people_message, mission_location=location)
    

    rospy.sleep(3)
    updateMissionDescription("Checking for humans mission has been completed successfully")
    # Perform any additional processing or mission planning logic
    print("Mission planning logic after taking a picture.")
    return

def searchForLaptop(feedback,goal_publisher, camera_listener):
    #MoveTo start
    location="bedroom"
    print('First, moving to ' + location)
    updateMissionDescription("Moving to the {} to check if the laptop is there".format(location), mission_location=location)
    p1 = Pose()
    p1.position = Point(x=3.172562, y=-0.001934, z=-0.001006)
    q1 = quaternion_from_euler(0, 0.003169, -0.292047)  # From euler angles (rpy) to quaternion
    p1.orientation = Quaternion(x=q1[0], y=q1[1], z=q1[2], w=q1[3])

    #1 localização

    ps1 = PoseStamped()
    ps1.pose = p1
    ps1.header = Header(frame_id='map', stamp=rospy.Time.now())  #Isto não é o path certo

    goal_publisher.publish(ps1)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    #UpdateMissionDescription("Mission complete!! Uff")
    print('move base completed goal with result ' + str(result_msg))

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location,file_nmbr=1)

    scanlaptop_message = "Scanning for laptop presence"
    updateMissionDescription(scanlaptop_message, mission_location=location)
    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(5)
    
    # Load a pretrained YOLOv8n model
    model = YOLO('yolov8n.pt')

    source = '../person_laptop/laptop.png'

    # Run inference on 'IMAGE1' with arguments
    model.predict(source, save=True, imgsz=320, conf=0.5, save_txt = True)

    filename = "/home/mestre/catkin_ws/src/TP3/PSR_Trabalho3/robutler_bringup_tp3/person_laptop/runs/detect/predict/labels/laptop.txt"

    with open(filename, "r") as f:
        first_two_characters = f.readline()[:2]
        print(first_two_characters)

    
    if first_two_characters == "63":
        laptop_message = "I have successfully detected the laptop!!!"
        updateMissionDescription(laptop_message)
        rospy.sleep(5)
        funny_message = "Someone has been playing Counter Strike (and they're even bigger bots than I am)"
        updateMissionDescription(funny_message)
    else:
        nolaptop_message = "There is no laptop on the desk"
        updateMissionDescription(nolaptop_message)
        
        
    rospy.sleep(2)
    end_laptop_message = "I have completed one more mission, what's next my Master?"
    updateMissionDescription(end_laptop_message)


def isTableClean(feedback, x, y, z, R, P, Y, location, goal_publisher, camera_listener):
    print('Moving to the table to see if it is clean')
    updateMissionDescription("Moving to the table to see if it is clean", mission_location=location)
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal move to ' + location)
    goal_publisher.publish(ps)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=80)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    #UpdateMissionDescription("Mission complete!! Uff")
    print('move base completed goal with result ' + str(result_msg))

    
    # Use Camera_listerner_3
    camera_listener_instance = camera_listener(location)

    complete_message = "Checking if the table is clean!"
    updateMissionDescription(complete_message, mission_location=location)
    #Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(2)
    
    # Perform any additional processing or mission planning logic
    print("Mission planning logic after taking a picture.")
    #Images comparison
    A = cv2.imread("../table_photos/Table_photo_1.png")
    B = cv2.imread("../table_photos/Table_photo_2.png")

    # Define ROI (adjust coordinates based on your specific scenario)
    roi_start = (200, 200)
    roi_end = (1800, 600)
    roi_A = A[roi_start[0]:roi_end[0], roi_start[1]:roi_end[1]]
    roi_B = B[roi_start[0]:roi_end[0], roi_start[1]:roi_end[1]]

    # Draw rectangle on the original images
    cv2.rectangle(A, roi_start, roi_end, color=(255, 0, 0), thickness=2)
    cv2.rectangle(B, roi_start, roi_end, color=(255, 0, 0), thickness=2)

    # Calculate error and similarity
    errorL2 = cv2.norm(roi_A, roi_B, cv2.NORM_L2)
    similarity = 1 - errorL2 / (roi_A.shape[0] * roi_A.shape[1])
    print("Similarity =", similarity)

    if similarity >= 0.85:
        complete_message = "There isn't any object on the table"
        updateMissionDescription(complete_message, mission_location=location)
        print("TABLE IS CLEAN")
    
    else:
        complete_message = "There are objects on the table...\nIt needs cleaning!!!"
        updateMissionDescription(complete_message, mission_location=location)
        print("TABLE WITH OBJECTS")
    rospy.sleep(5)

    finished_message = "Task completed, what do you want me to do next, Master?"
    updateMissionDescription(finished_message, mission_location=location)

    # Display images with rectangles
    #cv2.imshow("Image A with ROI", A)
    #cv2.imshow("Image B with ROI", B)
    #cv2.imshow("ROI A", roi_A)
    #cv2.imshow("ROI B", roi_B)
    cv2.waitKey(0)
    return

def main():
    global server

    # -------------------------------
    # Initialization
    # -------------------------------
    rospy.init_node("mission_manager")

    # Create move_base_simple/goal publisher
    goal_publisher = rospy.Publisher('/move_base_simple/goal', PoseStamped, queue_size=1)

    server = InteractiveMarkerServer("mission")
    print(server) 

    global h_first_entry, h_mode_last
    location = "spawn" 
    h_first_entry = menu_handler.insert("Move to")
    h_second_entry = menu_handler.insert("Take a Picture")
    h_third_entry = menu_handler.insert("Search for object in division")
    #h_fourth_entry = menu_handler.insert("Is Someone Home?")
    h_fifth_entry = menu_handler.insert("Is table clean?",
                                callback=partial(isTableClean,
                                                 x=1.536717, y=0.002346, z=0,
                                                 R=-0.000003, P=0.003185, Y=-1.565866,
                                                 location='Living_room',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener3))
    updateMissionDescription("Waiting for a Mission to start",mission_location=location)

            ############################ Move to missions ##########################################
    
    entry = menu_handler.insert("Kitchen", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=6.448510, y=-1.855999, z=0,
                                                 R=-0.003190, P=0.000139, Y=-1.489310,
                                                 location='Kitchen',
                                                 goal_publisher=goal_publisher))

    entry = menu_handler.insert("Bedroom", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=-4.409525, y=-0.182006, z=0,
                                                 R=-0.000007, P=0.003198, Y=1.980398,
                                                 location='Bedroom',
                                                 goal_publisher=goal_publisher))
   
    entry = menu_handler.insert("Playground", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=-5.515287, y=-3.298660, z=0,
                                                 R=-0.000007, P=0.003178, Y=-2.469781,   #mudei aqui
                                                 location='Playground',
                                                 goal_publisher=goal_publisher))
    
    entry = menu_handler.insert("Living_Room", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=2.250192, y=0.316127, z=0,
                                                 R=-0.000007, P=0.003170, Y=0.003170,
                                                 location='Living_Room',
                                                 goal_publisher=goal_publisher))

            ############################ Take a picture missions ##########################################

    entry = menu_handler.insert("Kitchen", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=2.987402, y=0.553971, z=0,
                                                 R=0, P=0.003182, Y=-0.620476,
                                                 location='Kitchen',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
  
    entry = menu_handler.insert("Gym", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=1.544719, y=0.655930, z=0,
                                                 R=0, P=0.003175, Y=1.103783,
                                                 location='Gym',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
    entry = menu_handler.insert("Bedroom", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=-3.003071, y=-1.536944, z=0,
                                                 R=0, P=0.003176, Y=2.376887,
                                                 location='Bedroom',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
    entry = menu_handler.insert("Living_Room", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=-0.049086, y=2.307656, z=0,
                                                 R=0, P=0.003169, Y=-1.387612,
                                                 location='Living_Room',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
    
    ############################### Search for object missions #######################

    ##### COLOCAR BEM AQUI NO MENU
    entry = menu_handler.insert("Kitchen", parent=h_third_entry,
                                callback=partial(searchForObject,
                                                x=2.987402, y=0.553971, z=0,
                                                R=0, P=0.003182, Y=-0.620476,
                                                location='Kitchen',
                                                goal_publisher=goal_publisher))

    entry = menu_handler.insert("Gym", parent=h_third_entry,
                                callback=partial(searchForObject,
                                                x=1.544719, y=0.655930, z=0,
                                                R=0, P=0.003175, Y=1.103783,
                                                location='Gym',
                                                goal_publisher=goal_publisher))
    
    entry = menu_handler.insert("Bedroom", parent=h_second_entry,
                                callback=partial(searchForObject,
                                                 x=-3.003071, y=-1.536944, z=0,
                                                 R=0, P=0.003176, Y=2.376887,
                                                 location='Bedroom',
                                                 goal_publisher=goal_publisher))
    
    entry = menu_handler.insert("Living_Room", parent=h_second_entry,
                                callback=partial(searchForObject,
                                                 x=-0.049086, y=2.307656, z=0,
                                                 R=0, P=0.003169, Y=-1.387612,
                                                 location='Living_Room',
                                                 goal_publisher=goal_publisher))
    
    ############################### Is someone home missions #######################


    # entry = menu_handler.insert("Is someone home?", parent=h_fourth_entry,
    #                             callback=partial(searchForPerson,
    #                                              goal_publisher=goal_publisher,
    #                                              camera_listener=CameraListener2))
    
    makeMenuMarker("marker1")

    menu_handler.apply(server, "marker1")
    server.applyChanges()

    rospy.spin()


if __name__ == '__main__':
    main()