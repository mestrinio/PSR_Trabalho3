#!/usr/bin/env python3

from datetime import datetime
import rospy
from functools import partial
from interactive_markers.interactive_marker_server import *
from interactive_markers.menu_handler import *
from visualization_msgs.msg import *
from geometry_msgs.msg import Pose, Point, Quaternion, PoseStamped
from tf.transformations import quaternion_from_euler
from move_base_msgs.msg import MoveBaseActionResult
from std_msgs.msg import String, Header
import os
from rospkg import RosPack
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
import cv2
import numpy as np
from visualization_msgs.msg import Marker
from color_detection_copy import ObjectDetectionNode
from playsound import playsound
from sounds import play
import pygame
import gtts
from tts import text_to_speech,txt_speech
#from ultralytics import YOLO



server = None
marker_pos = 1
menu_handler = MenuHandler()
h_first_entry = 0
h_second_entry = 0 ###
h_third_entry = 0 ###
h_fourth_entry = 0 ####
h_fifth_entry = 0 #### 
h_mode_last = 0

current_mission_marker = None

lord_message = "It shall be done, my Lord."


def enableCb(feedback):
    handle = feedback.menu_entry_id
    state = menu_handler.getCheckState(handle)

    if state == MenuHandler.CHECKED:
        menu_handler.setCheckState(handle, MenuHandler.UNCHECKED)
        rospy.loginfo("Hiding first menu entry")
        menu_handler.setVisible(h_first_entry, False)
    else:
        menu_handler.setCheckState(handle, MenuHandler.CHECKED)
        rospy.loginfo("Showing first menu entry")
        menu_handler.setVisible(h_first_entry, True)

    menu_handler.reApply(server)
    rospy.loginfo("update")
    server.applyChanges()


def modeCb(feedback):
    global h_mode_last
    menu_handler.setCheckState(h_mode_last, MenuHandler.UNCHECKED)
    h_mode_last = feedback.menu_entry_id
    menu_handler.setCheckState(h_mode_last, MenuHandler.CHECKED)

    rospy.loginfo("Switching to menu entry #" + str(h_mode_last))
    menu_handler.reApply(server)
    print("DONE")
    server.applyChanges()


def makeBox(msg):
    marker = Marker()

    marker.type = Marker.SPHERE
    marker.scale.x = msg.scale * 0.45
    marker.scale.y = msg.scale * 0.45
    marker.scale.z = msg.scale * 0.45
    marker.color.r = 0.5
    marker.color.g = 0.5
    marker.color.b = 0.5
    marker.color.a = 0.2

    return marker


def makeBoxControl(msg):
    control = InteractiveMarkerControl()
    control.always_visible = True
    control.markers.append(makeBox(msg))
    msg.controls.append(control)
    return control


def makeEmptyMarker(dummyBox=True):
    global marker_pos
    int_marker = InteractiveMarker()
    int_marker.header.frame_id = "base_link"
    int_marker.pose.position.z = marker_pos
    marker_pos += 1
    int_marker.scale = 1
    return int_marker


def makeMenuMarker(name):
    int_marker = makeEmptyMarker()
    int_marker.name = name

    control = InteractiveMarkerControl()

    control.interaction_mode = InteractiveMarkerControl.BUTTON
    control.always_visible = True

    control.markers.append(makeBox(int_marker))
    int_marker.controls.append(control)

    server.insert(int_marker)

def makeTextMarker(name, text, frame_id="base_link"):
    int_marker = InteractiveMarker()
    int_marker.header.frame_id = frame_id
    int_marker.name = name

    text_marker = Marker()
    text_marker.type = Marker.TEXT_VIEW_FACING
    text_marker.text = text
    text_marker.pose.position.z = 1.10 # Adjust the height of the text
    text_marker.scale.z = 0.4
    text_marker.color.r = 0.0
    text_marker.color.g = 0.0
    text_marker.color.b = 0.0
    text_marker.color.a = 1.0

    control = InteractiveMarkerControl()
    control.markers.append(text_marker)
    control.always_visible = True
    int_marker.controls.append(control)

    return int_marker, text_marker



def deepCb(feedback):
    rospy.loginfo("The deep sub-menu has been found.")


def updateMissionDescription(mission_name, mission_location, complete_message=None):
    global current_mission_marker

    # If a completion message is provided, display it
    if complete_message:
        # Remove the current mission text marker if exists
        if current_mission_marker:
            server.erase(current_mission_marker.name)
            server.applyChanges()

        # Create a new text marker for the completion message
        mission_text_marker_complete, _ = makeTextMarker("text_mission_complete", complete_message)
        mission_text_marker_complete.pose.position.z = 1.5  # Adjust the height of the completion message
        server.insert(mission_text_marker_complete)
        server.applyChanges()

        # Update the global variable
        current_mission_marker = mission_text_marker_complete
    else:
        # Remove the current mission text marker if exists
        if current_mission_marker:
            server.erase(current_mission_marker.name)
            server.applyChanges()

        # Create a new text marker for the mission description
        mission_text_marker, _ = makeTextMarker("text_mission_description", mission_name)
        
        mission_text_marker.pose.position.z = 1  # Adjust the height of the text

        # Insert the new mission text marker
        server.insert(mission_text_marker)
        server.applyChanges()

        # Update the global variable
        current_mission_marker = mission_text_marker
        
        # Text to speech the marker
        text_to_speech(mission_name)
        txt_speech(mission_name)
    
def create_masks(image):
        
    # Define the region of interest (ROI) in order to ignore the orange/yellow collored floor
    roi = image[:7 * image.shape[0] // 12, :]
    
    #DIFFERENT COLORS - NECESSITA ALTERAÇOES EM TDOAS MENOS PURPLE E BLUE
    #Purple
    lower_purple = np.array([120, 50, 50])
    upper_purple = np.array([150, 255, 255])

    #Blue
    lower_blue = np.array([78,158,124])  # Acertos na deteção do blue das bolas 
    upper_blue = np.array([138,255,255])

    #Light blue
    lower_lblue = np.array([100, 100, 100])
    upper_lblue = np.array([130, 255, 255])

    # Orange
    lower_orange = np.array([5, 100, 100])
    upper_orange = np.array([20, 255, 255])

    #Green
    lower_green = np.array([40, 40, 40]) 
    upper_green = np.array([80, 255, 255]) 


    # Yellow
    lower_yellow = np.array([25, 100, 100])
    upper_yellow = np.array([40, 255, 255])
    
    #Red
    lower_red = np.array([0, 100, 100])  
    upper_red = np.array([5, 255, 255]) 

    # Threshold the image to get only the desired color
    masks = {
        "purple" : cv2.inRange(roi, lower_purple, upper_purple),
        "blue" : cv2.inRange(roi, lower_blue, upper_blue),
        "l_blue" : cv2.inRange(roi, lower_lblue, upper_lblue),
        "orange": cv2.inRange(roi, lower_orange, upper_orange),
        "green" : cv2.inRange(roi, lower_green, upper_green),
        "yellow" : cv2.inRange(roi, lower_yellow, upper_yellow),
        "red" : cv2.inRange(roi, lower_red, upper_red), 
    }
    
    return masks


class CameraListener:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data):
        if hasattr(self, 'image_saved') and not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "photos")                            
                
                timestamp = datetime.now()
                
                # Format timestamp
                timestamp_formatted = timestamp.strftime("%d-%m-%Y_%H-%M-%S")            
                
                file_name = f"Photo_of_{self.location}_{timestamp_formatted}.jpg"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                play('foto')
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))

class CameraListener2:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data,file_nmbr):
        if hasattr(self, 'image_saved') and not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "person_laptop")                            
                if file_nmbr == 1:                
                    file_name = "Person1.png"
                elif file_nmbr == 2:
                    file_name = "Person2.png"
                else:
                    file_name = "Person3.png"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                play('foto')
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))

class CameraListener3:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data):
        if hasattr(self, 'image_saved') and not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "table_photos")                                          
                file_name = "Table_photo_2.png"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                play('foto')
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))

class CameraListener4:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data):
        if hasattr(self, 'image_saved') and not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "person_laptop")                                          
                file_name = "laptop.png"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                play('foto')
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))

class CameraListener5:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data):
        if hasattr(self, 'image_saved') and not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "coke_can")                                          
                file_name = "coke_can.png"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                play('foto')
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))
                
                
class CameraListener6:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data):
        if hasattr(self, 'image_saved') and not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "object_detec")                                          
                file_name = "object_detec.png"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                play('foto')
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))



def takeAPicture(feedback, x, y, z, R, P, Y, location, goal_publisher, camera_listener):
    print('First, moving to ' + location)
    updateMissionDescription("Moving to the {} to take a picture".format(location), mission_location=location)
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal move to ' + location)
    goal_publisher.publish(ps)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=80)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    #UpdateMissionDescription("Mission complete!! Uff")
    print('move base completed goal with result ' + str(result_msg))

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location)

    complete_message = "Mission complete! Picture taken sucessfully!"
    updateMissionDescription(complete_message, mission_location=location)
    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(5)
    
    # Perform any additional processing or mission planning logic
    print("Mission planning logic after taking a picture.")
    return


    # Optionally, signal shutdown
    #rospy.signal_shutdown("Mission complete. Shutting down.")


def moveTo(feedback, x, y, z, R, P, Y, location, goal_publisher):
    print('Called moving to ' + location)
    updateMissionDescription("Moving to the {}".format(location), mission_location=location)
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal move to ' + location)
    goal_publisher.publish(ps)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    print('move base completed goal with result ' + str(result_msg))
        
    complete_message = "Mission complete! Uff"
    updateMissionDescription(complete_message, mission_location=location)



def searchForObject(feedback, x, y, z, R, P, Y, location, ball, color, goal_publisher, camera_listener):
    
    
    updateMissionDescription(lord_message, mission_location=location)
    rospy.sleep(2)
    
    
    # RED mask
    lower_red = np.array([0, 100, 100])  
    upper_red = np.array([5, 255, 255])   
    # BLUE mask
    lower_blue = np.array([78,158,124])  # Acertos na deteção do blue das bolas 
    upper_blue = np.array([138,255,255])  

    is_ball = ball
    
    
    
    #MoveTo start
    print('First, moving to ' + location)
    
    if is_ball == True:
        updateMissionDescription("Moving to the {} to check for {} balls".format(location,color), mission_location=location)
    else: 
        updateMissionDescription("Moving to the {} to check for {} cubes".format(location,color), mission_location=location)
    
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal move to ' + location)
    goal_publisher.publish(ps)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    print('move base completed goal with result ' + str(result_msg))
        
    destination_message = "Reached my destination"
    updateMissionDescription(destination_message, mission_location=location)
    rospy.sleep(3)
    ##### Tirar a foto
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location)

    if is_ball == True:
        updateMissionDescription("Checking for {} balls".format(color), mission_location=location)
    else: 
        updateMissionDescription("Checking for {} cubes".format(color), mission_location=location)
    
    
    #Deteção de Cor na foto

    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(3)

    cv_image= cv2.imread("../object_detec/object_detec.png")
    rospy.sleep(3)

    cv_image = cv_image[:7 * cv_image.shape[0] // 12, :]
    #cv2.imwrite('object_detec.png',cv_image)
    
    # Convert BGR to HSV
    hsv_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)
    

    # Use only the red mask in the image_callback function
    if color == "red":
        mask = cv2.inRange(hsv_image, lower_red, upper_red)
    else:
        mask = cv2.inRange(hsv_image, lower_blue, upper_blue)
    
    result = cv2.bitwise_and(cv_image,cv_image, mask= mask)
    #cv2.imshow('result',result)
    #cv2.waitKey(0)
    #cv2.imwrite('object_detec.png',result)
    cv2.imshow('mask',mask)
    cv2.waitKey(0)
    rospy.sleep(1)
    # Find contours for red objects
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    object_count = 0
    new_contours = []
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > 300:
            new_contours.append(contour)    
    
    gray = cv2.cvtColor(result, cv2.COLOR_BGR2GRAY)
    blur = cv2.medianBlur(gray,5)
    
    spheres = cv2.HoughCircles(blur,cv2.HOUGH_GRADIENT,1.3,20,
                            param1=150,param2=39,minRadius=80,maxRadius=150)
    try:
        spheres = np.uint16(np.around(spheres))   
        print('spheres',spheres.size)
        spheres_size = spheres.size
    except:
        spheres_size = 0
    
    if new_contours:
        if is_ball:
            if spheres is not None:
                
                object_count = spheres_size/3
            updateMissionDescription("Found {} {} balls".format(int(object_count),color), mission_location=location)
        else:
            object_count = len(new_contours)
            if spheres is not None:
                object_count = object_count - spheres_size/3
            updateMissionDescription("Found {} {} cubes".format(int(object_count),color), mission_location=location)
        
    
    
    rospy.sleep(3)
    complete_message = "Checking for objects type of mission done, what's my next one?"
    updateMissionDescription(complete_message,mission_location=location)



#Search for person Yolo only
'''def searchForPerson(feedback,goal_publisher, camera_listener):
    #MoveTo start
    location="kitchen"
    print('First, moving to ' + location)
    updateMissionDescription("Moving to the {} to see if someone is there".format(location), mission_location=location)
    p1 = Pose()
    p1.position = Point(x=3.172562, y=-0.001934, z=-0.001006)
    q1 = quaternion_from_euler(0, 0.003169, -0.292047)  # From euler angles (rpy) to quaternion
    p1.orientation = Quaternion(x=q1[0], y=q1[1], z=q1[2], w=q1[3])

    #1 localização

    ps1 = PoseStamped()
    ps1.pose = p1
    ps1.header = Header(frame_id='map', stamp=rospy.Time.now())  #Isto não é o path certo

    print('First looking in : ' + location)
    goal_publisher.publish(ps1)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    
    print('move base completed goal with result ' + str(result_msg))

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location,file_nmbr=1)
    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(5)
    
    first_message = "Completed my first trip, lets look in another place"
    updateMissionDescription(first_message, mission_location=location)
   
    

    
    #2 localização

    location="living_room"
    print('Now checking : ' + location)
    updateMissionDescription("Moving to the {} to see if someone is there".format(location), mission_location=location)
    p2 = Pose()
    p2.position = Point(x=6.245474, y=-1.511837, z=-0.001006)
    q2 = quaternion_from_euler(0 , 0.003169, 2.786313)  # From euler angles (rpy) to quaternion
    p2.orientation = Quaternion(x=q2[0], y=q2[1], z=q2[2], w=q2[3])

    ps2 = PoseStamped()
    ps2.pose = p2
    ps2.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Now cheking : ' + location)
    goal_publisher.publish(ps2)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    
    print('move base completed goal with result ' + str(result_msg))

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location,file_nmbr=2)
    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(5)

    second_message = "I successfully analyzed this place aswell"
    updateMissionDescription(second_message, mission_location=location)

    
    
    #3ª localização 
    location="bedroom"
    print('Now checking : ' + location)
    updateMissionDescription("Moving to the {} to see if someone is there".format(location), mission_location=location)
    p3 = Pose()
    p3.position = Point(x=-2.405233, y=-0.992072, z=-0.001006)
    q3 = quaternion_from_euler(0 , 0.003181, 2.740030)  # From euler angles (rpy) to quaternion
    p3.orientation = Quaternion(x=q3[0], y=q3[1], z=q3[2], w=q3[3])

    ps3 = PoseStamped()
    ps3.pose = p3
    ps3.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Lastly cheking for people in : ' + location)
    goal_publisher.publish(ps3)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    print('move base completed goal with result ' + str(result_msg))

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location,file_nmbr=3)
    #Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(5)

    third_message = "All the photos are taken, lets check results"
    updateMissionDescription(third_message, mission_location=location)
    

    #Implementação do YOLO
    model = YOLO('yolov8n.pt')

    source1 = '../person_laptop/Person1.png'
    source2 = '../person_laptop/Person2.png'
    source3 = '../person_laptop/Person3.png'

    # Run inference on 'IMAGE1' with arguments
    model.predict(source1, save=True, imgsz=320, conf=0.5, save_txt = True)
    print('MODELO11111111111111111111111')
    rospy.sleep(1)
    model.predict(source2, save=True, imgsz=320, conf=0.5, save_txt = True)
    rospy.sleep(1)
    print('Modelo2"2222222222222222222')
    model.predict(source3, save=True, imgsz=320, conf=0.5, save_txt = True)
    rospy.sleep(1)
    print('MODELO3333333333333')

    has_people=[]
    rospy.sleep(3)
    
    path1 = "/home/mestre/catkin_ws/src/TP3/PSR_Trabalho3/robutler_bringup_tp3/person_laptop/runs/detect/predict/labels/Person1.txt"
    
    try:
        with open(path1) as f:
            c = f.read()
            if not c:
                has_people.append(False)
            elif c[0] != '0':
                has_people.append(False)
            else:
                has_people.append(True)
    except:
        has_people.append(False)
            
    
    path2 = "/home/mestre/catkin_ws/src/TP3/PSR_Trabalho3/robutler_bringup_tp3/person_laptop/runs/detect/predict/labels/Person2.txt"
    
    try:  
        with open(path2) as f:
            c = f.read()
            if not c:
                has_people.append(False)
            elif c[0] != '0':
                has_people.append(False)
            else:
                has_people.append(True)
    except:
        has_people.append(False)
        
        
    path3 = "/home/mestre/catkin_ws/src/TP3/PSR_Trabalho3/robutler_bringup_tp3/person_laptop/runs/detect/predict/labels/Person3.txt"
    
    try:
        with open(path3) as f:
            c = f.read()
            if not c:
                has_people.append(False)
            elif c[0] != '0':
                has_people.append(False)
            else:
                has_people.append(True)
    except:
        has_people.append(False)

    # Detections where? X,X,X
    print(has_people)

    calculations_message = "According to my calculations..."
    updateMissionDescription(calculations_message, mission_location=location)
    
    rospy.sleep(2)
    
    rooms = ['Kitchen','Living room','Bedroom']
    people_message = ""
    if any(people for people in has_people):
        for room, people in zip(rooms,has_people):
            people_message = people_message + "The {} has {} people \n".format(room,"" if people else "no")
            print(people_message)
            updateMissionDescription(people_message, mission_location=location)
            rospy.sleep(2)
    else:
        people_message = "There isn't anyone home!"
        updateMissionDescription(people_message, mission_location=location)
    

    rospy.sleep(3)
    complete_message = "Checking for humans mission has been completed successfully"
    updateMissionDescription(complete_message,mission_location=location)
    # Perform any additional processing or mission planning logic
    print("Mission planning logic after taking a picture.")
    return

#def searchForLaptop(feedback,goal_publisher, camera_listener):
    #MoveTo start
    location="bedroom"
    print('First, moving to ' + location)
    updateMissionDescription("Moving to the {} to check if the laptop is there".format(location), mission_location=location)
    p1 = Pose()
    p1.position = Point(x=-8.115748, y=1.139848, z=-0.001006)
    q1 = quaternion_from_euler(-0.000003, 0.003169, 2.422705)  # From euler angles (rpy) to quaternion
    p1.orientation = Quaternion(x=q1[0], y=q1[1], z=q1[2], w=q1[3])

    #1 localização

    ps1 = PoseStamped()
    ps1.pose = p1
    ps1.header = Header(frame_id='map', stamp=rospy.Time.now())  #Isto não é o path certo

    goal_publisher.publish(ps1)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    print('move base completed goal with result ' + str(result_msg))
    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(3)

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location)

    scanlaptop_message = "Scanning for laptop presence"
    updateMissionDescription(scanlaptop_message, mission_location=location)
    
    
    # Load a pretrained YOLOv8n model
    model = YOLO('yolov8n.pt')

    source = '../person_laptop/laptop.png'

    # Run inference on 'IMAGE1' with arguments
    model.predict(source, save=True, imgsz=320, conf=0.5, save_txt = True)

    filename = "/home/mestre/catkin_ws/src/TP3/PSR_Trabalho3/robutler_bringup_tp3/person_laptop/runs/detect/predict/labels/laptop.txt"

    try:
        with open(filename, "r") as f:
            first_two_characters = f.readline()[:2]
            print(first_two_characters)


        if first_two_characters == "63":
            laptop_message = "I have successfully detected the laptop!!!"
            updateMissionDescription(laptop_message,mission_location=location)
            rospy.sleep(5)
            funny_message = "Someone has been playing Counter Strike (and they're even bigger bots than I am)"
            updateMissionDescription(funny_message,mission_location=location)
        else:
            nolaptop_message = "There is no laptop on the desk"
            updateMissionDescription(nolaptop_message,mission_location=location)

    except:
        nolaptop_message = "There is no laptop on the desk"
        updateMissionDescription(nolaptop_message,mission_location=location)
    rospy.sleep(4)
    complete_message = "I have completed one more mission, what's next my Master?"
    updateMissionDescription(complete_message,mission_location=location) '''

def searchForCoke(feedback, x, y, z, R, P, Y,location,goal_publisher,camera_listener):
    #MoveTo start
    
    print('First, moving to ' + location)
    updateMissionDescription("Moving to the {} to check if the laptop is there".format(location), mission_location=location)
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal move to ' + location)
    goal_publisher.publish(ps)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    print('move base completed goal with result ' + str(result_msg))
        
    complete_message = "Acabei o deslocamento"
    updateMissionDescription(complete_message, mission_location=location)
    
    ##### Tirar a foto
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location)

    updateMissionDescription("Looking for a can of coke in {}".format(location), mission_location=location)
    
    #Deteção de Cor na foto

    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(3)

    cv_image= cv2.imread("../coke_can/coke_can.png")
    rospy.sleep(3)


    # Convert BGR to HSV
    hsv_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)

    masks = create_masks(hsv_image)

    # Use only the red mask in the image_callback function
    red_mask = masks["red"]

    # Find contours for red objects
    red_contours, _ = cv2.findContours(red_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    object_contours = 0

    for contour in red_contours:
        area = cv2.contourArea(contour)
        if area > 100:
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(cv_image, (x, y), (x + w, y + h), (0, 255, 0), 2)
            label = "Red"
            cv2.putText(cv_image, label, (x + 3, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)
            object_contours += 1

    if object_contours > 0:
        print("Coke detected!!!!!")
        updateMissionDescription("Looks like there is coke in the {}".format(location), mission_location=location)

    else:
        print("Bebe água que é melhor.")
        updateMissionDescription("Nope, nothing here boss! Drink water please.", mission_location=location)



    # Display the result (you can remove this in the final version)
    # cv2.imshow("Red Object Detection", cv_image)
    # cv2.waitKey(1)
    
    rospy.sleep(5)
    end_laptop_message = "I have completed one more mission, what's my next assignment?"
    updateMissionDescription(end_laptop_message,mission_location=location)



def isTableClean(feedback,goal_publisher, camera_listener):
    # #MoveTo start to a close position for better photo accuracy
    # location="living_room"
    # print('First, moving to ' + location)
    # updateMissionDescription("Moving to the table to see if it is clean", mission_location=location)
    # p1 = Pose()
    # p1.position = Point(x=1.545080, y=0.357494, z=0)
    # q1 = quaternion_from_euler(-0.000003 , 0.003184 , -1.554284)  # From euler angles (rpy) to quaternion
    # p1.orientation = Quaternion(x=q1[0], y=q1[1], z=q1[2], w=q1[3])

    # #1 localização

    # ps1 = PoseStamped()
    # ps1.pose = p1
    # ps1.header = Header(frame_id='map', stamp=rospy.Time.now())  #Isto não é o path certo

    # print('First looking in : ' + location)
    # goal_publisher.publish(ps1)

    # # TODO know when move is finished
    # try:
    #     result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    # except:
    #     print('Timeout waiting for moveto')
    #     # TODO
    #     return
    # rospy.sleep(2)

    #Real photo position
    location="living_room"
    print('First, moving to ' + location)
    updateMissionDescription("Just getting into position for my analysis", mission_location=location)
    p2 = Pose()
    p2.position = Point(x=1.536717, y=0.002346, z=0)
    q2 = quaternion_from_euler(-0.000003 , 0.003185 , -1.565866)  # From euler angles (rpy) to quaternion
    p2.orientation = Quaternion(x=q2[0], y=q2[1], z=q2[2], w=q2[3])

    #1 localização

    ps2 = PoseStamped()
    ps2.pose = p2
    ps2.header = Header(frame_id='map', stamp=rospy.Time.now())  #Isto não é o path certo

    print('First looking in : ' + location)
    goal_publisher.publish(ps2)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return
    print('move base completed goal with result ' + str(result_msg))

    # Use Camera_listerner_3
    camera_listener_instance = camera_listener(location)

    complete_message = "Checking if the table is clean!"
    updateMissionDescription(complete_message, mission_location=location)
    #Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(2)
    
    # Perform any additional processing or mission planning logic
    print("Mission planning logic after taking a picture.")
    #Images comparison
    A = cv2.imread("../table_photos/Table_photo_1.png")
    B = cv2.imread("../table_photos/Table_photo_2.png")

    # Define ROI (adjust coordinates based on your specific scenario)
    roi_start = (200, 200)
    roi_end = (1800, 600)
    roi_A = A[roi_start[0]:roi_end[0], roi_start[1]:roi_end[1]]
    roi_B = B[roi_start[0]:roi_end[0], roi_start[1]:roi_end[1]]

    # Draw rectangle on the original images
    cv2.rectangle(A, roi_start, roi_end, color=(255, 0, 0), thickness=2)
    cv2.rectangle(B, roi_start, roi_end, color=(255, 0, 0), thickness=2)

    # Calculate error and similarity
    errorL2 = cv2.norm(roi_A, roi_B, cv2.NORM_L2)
    similarity = 1 - errorL2 / (roi_A.shape[0] * roi_A.shape[1])
    print("Similarity =", similarity)

    if similarity >= 0.83:
        complete_message = "There aren't any object on the table\nIts clean boss!"
        updateMissionDescription(complete_message, mission_location=location)
        print("TABLE IS CLEAN")
    
    else:
        complete_message = "There are objects on the table...\nIt needs cleaning!"
        updateMissionDescription(complete_message, mission_location=location)
        print("TABLE WITH OBJECTS")
    rospy.sleep(5)

    finished_message = "Task completed, what do you want me to do next, Master?"
    updateMissionDescription(finished_message, mission_location=location)

    # Display images with rectangles
    #cv2.imshow("Image A with ROI", A)
    #cv2.imshow("Image B with ROI", B)
    #cv2.imshow("ROI A", roi_A)
    #cv2.imshow("ROI B", roi_B)
    cv2.waitKey(0)
    return



def storytelling(feedback,goal_publisher):
    
    #MoveTo start
    location="First_Frame"
    print('First, moving to ' + location)
    updateMissionDescription("Oh, you're bored and want me to tell you a story? \nAlright, let me just get ready", mission_location=location)
    p1 = Pose()
    p1.position = Point(x=3.172562, y=-0.001934, z=-0.001006)
    q1 = quaternion_from_euler(0, 0.003169, -0.292047)  # From euler angles (rpy) to quaternion
    p1.orientation = Quaternion(x=q1[0], y=q1[1], z=q1[2], w=q1[3])

    #1 localização

    ps1 = PoseStamped()
    ps1.pose = p1
    ps1.header = Header(frame_id='map', stamp=rospy.Time.now())  #Isto não é o path certo

    
    goal_publisher.publish(ps1)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    
    print('move base completed goal with result ' + str(result_msg))
    
    first_message = "This is Luís, also known as 'sapo', he is a mechanical engineer."
    updateMissionDescription(first_message, mission_location=location)

    
    #2 localização

    location="Second_Frame"
    print('Now moving to: ' + location)
    updateMissionDescription("vroom", mission_location=location)
    
    p2 = Pose()
    p2.position = Point(x=6.245474, y=-1.511837, z=-0.001006)
    q2 = quaternion_from_euler(0 , 0.003169, 2.786313)  # From euler angles (rpy) to quaternion
    p2.orientation = Quaternion(x=q2[0], y=q2[1], z=q2[2], w=q2[3])

    ps2 = PoseStamped()
    ps2.pose = p2
    ps2.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Arrived at second frame')
    goal_publisher.publish(ps2)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    
    print('move base completed goal with result ' + str(result_msg))


    second_message = "And this is Pedro, also known as Mestre, he is also a mechanical engineer"
    updateMissionDescription(second_message, mission_location=location)

    
    
    #3ª localização 
    location="Third_Frame"
    print('Now moving to : ' + location)
    updateMissionDescription("SKRRRR", mission_location=location)
    p3 = Pose()
    p3.position = Point(x=-2.405233, y=-0.992072, z=-0.001006)
    q3 = quaternion_from_euler(0 , 0.003181, 2.740030)  # From euler angles (rpy) to quaternion
    p3.orientation = Quaternion(x=q3[0], y=q3[1], z=q3[2], w=q3[3])

    ps3 = PoseStamped()
    ps3.pose = p3
    ps3.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Arrived at: ' + location)
    goal_publisher.publish(ps3)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    print('move base completed goal with result ' + str(result_msg))



    third_message = "And this is Afonso, also known as Nuno, and yes he is also a mechanical engineer."
    updateMissionDescription(third_message, mission_location=location)
    
    
        
    
    #4ª localização 
    location="Fourth_Frame"
    print('Now moving to : ' + location)
    updateMissionDescription("weeeeeeeeeeeeeeee", mission_location=location)
    p4 = Pose()
    p4.position = Point(x=-2.405233, y=-0.992072, z=-0.001006)
    q4 = quaternion_from_euler(0 , 0.003181, 2.740030)  # From euler angles (rpy) to quaternion
    p4.orientation = Quaternion(x=q4[0], y=q4[1], z=q4[2], w=q4[3])

    ps4 = PoseStamped()
    ps4.pose = p4
    ps4.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Arrived at: ' + location)
    goal_publisher.publish(ps4)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=120)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    print('move base completed goal with result ' + str(result_msg))



    fourth_message = "And this is THOR, also know as Trully Hardworking Outstanding Robot,\ntheir magnificent creation..."
    updateMissionDescription(fourth_message, mission_location=location)
    
    rospy.sleep(10)
    fifth_message = "The End."
    updateMissionDescription(fifth_message, mission_location=location)
    rospy.sleep(5)
    
    complete_message = "I know it was an awesome story, what shall I do next?"
    updateMissionDescription(complete_message, mission_location=location)
    




def main():
    global server
    
    # -------------------------------
    # Initialization
    # -------------------------------
    rospy.init_node("mission_manager")

    # Create move_base_simple/goal publisher
    goal_publisher = rospy.Publisher('/move_base_simple/goal', PoseStamped, queue_size=1)

    server = InteractiveMarkerServer("mission")
    print(server) 

    global h_first_entry, h_mode_last
    location = "spawn" 
    h_first_entry = menu_handler.insert("Move to")
    h_second_entry = menu_handler.insert("Take a Picture")
    h_third_entry = menu_handler.insert("Search for object in division")
    h_sixth_entry = menu_handler.insert("Tell me a story")
    #h_fourth_entry = menu_handler.insert("Is Someone Home?")
    # h_fifth_entry = menu_handler.insert("Is table clean?",
    #                             callback=partial(isTableClean,
    #                                              x=1.536717, y=0.002346, z=0,
    #                                              R=-0.000003, P=0.003185, Y=-1.565866,
    #                                              location='Living_room',
    #                                              goal_publisher=goal_publisher,
    #                                              camera_listener=CameraListener3))
    h_fifth_entry = menu_handler.insert("Is table clean?",
                                callback=partial(isTableClean,
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener3))
    
    updateMissionDescription("Waiting for a Mission to start",mission_location=location)

            ############################ Move to missions ##########################################
    
    entry = menu_handler.insert("Kitchen", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=6.448510, y=-1.855999, z=0,
                                                 R=-0.003190, P=0.000139, Y=-1.489310,
                                                 location='Kitchen',
                                                 goal_publisher=goal_publisher))

    entry = menu_handler.insert("Bedroom", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=-4.409525, y=-0.182006, z=0,
                                                 R=-0.000007, P=0.003198, Y=1.980398,
                                                 location='Bedroom',
                                                 goal_publisher=goal_publisher))
   
    entry = menu_handler.insert("Playground", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=-5.515287, y=-3.298660, z=0,
                                                 R=-0.000007, P=0.003178, Y=-2.469781,   #mudei aqui
                                                 location='Playground',
                                                 goal_publisher=goal_publisher))
    
    entry = menu_handler.insert("Living_Room", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=2.250192, y=0.316127, z=0,
                                                 R=-0.000007, P=0.003170, Y=0.003170,
                                                 location='Living_Room',
                                                 goal_publisher=goal_publisher))

            ############################ Take a picture missions ##########################################

    entry = menu_handler.insert("Kitchen", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=2.987402, y=0.553971, z=0,
                                                 R=0, P=0.003182, Y=-0.620476,
                                                 location='Kitchen',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
  
    entry = menu_handler.insert("Gym", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=1.544719, y=0.655930, z=0,
                                                 R=0, P=0.003175, Y=1.103783,
                                                 location='Gym',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
    entry = menu_handler.insert("Bedroom", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=-3.003071, y=-1.536944, z=0,
                                                 R=0, P=0.003176, Y=2.376887,
                                                 location='Bedroom',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
    entry = menu_handler.insert("Living_Room", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=-0.049086, y=2.307656, z=0,
                                                 R=0, P=0.003169, Y=-1.387612,
                                                 location='Living_Room',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
    
    ############################### Search for object missions #######################

    
    # ##### PREENCHER COM O RESTO DOS OBJETOS
    entry_laptop = menu_handler.insert("Laptop",parent=h_third_entry)
    entry_coke_can = menu_handler.insert("Coke Can",parent=h_third_entry)
    entry_blueball = menu_handler.insert("Blue Ball",parent=h_third_entry)
    entry_redball = menu_handler.insert("Red Ball",parent=h_third_entry)
    entry_bluecube = menu_handler.insert("Blue Cube",parent=h_third_entry)
    entry_redcube = menu_handler.insert("Red Cube",parent=h_third_entry)
    
    # entry = menu_handler.insert("Bedroom", parent=entry_laptop,
    #                             callback=partial(searchForLaptop,
    #                                              goal_publisher=goal_publisher,                                                
    #                                              camera_listener=CameraListener4))
    
    
    ############# COCA ###############
   
    entry = menu_handler.insert("Living_room", parent=entry_coke_can,
                                callback=partial(searchForCoke,
                                                 x=1.536717, y=0.002346, z=0,
                                                 R=0, P=0.003185, Y=-1.565866,
                                                 location='Living_Room',
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener5))
    
     ########### BLUE BALL ###########

    
    entry = menu_handler.insert("Living_room", parent=entry_blueball,
                                callback=partial(searchForObject,
                                                 x=1.536717, y=0.002346, z=0,
                                                 R=0, P=0.003185, Y=-1.565866,
                                                 location='Living_Room',
                                                 ball = True,
                                                 color = "blue",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
    
    entry = menu_handler.insert("Kitchen", parent=entry_blueball,
                                callback=partial(searchForObject,
                                                 x=2.987402, y=0.553971, z=0,
                                                 R=0, P=0.003182, Y=-0.620476,
                                                 location='Kitchen',
                                                 ball = True,
                                                 color = "blue",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
        
    entry = menu_handler.insert("Bedroom", parent=entry_blueball,
                                callback=partial(searchForObject,
                                                 x=-3.003071, y=-1.536944, z=0,
                                                 R=0, P=0.003176, Y=2.376887,
                                                 location='Bedroom',
                                                 ball = True,
                                                 color = "blue",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
    
    
    ############ RED BALL ###########
    
    entry = menu_handler.insert("Living_room", parent=entry_redball,
                                callback=partial(searchForObject,
                                                 x=1.536717, y=0.002346, z=0,
                                                 R=0, P=0.003185, Y=-1.565866,
                                                 location='Living_Room',
                                                 ball = True,
                                                 color = "red",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
    
    entry = menu_handler.insert("Kitchen", parent=entry_redball,
                                callback=partial(searchForObject,
                                                 x=2.987402, y=0.553971, z=0,
                                                 R=0, P=0.003182, Y=-0.620476,
                                                 location='Kitchen',
                                                 ball = True,
                                                 color = "red",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
        
    entry = menu_handler.insert("Bedroom", parent=entry_redball,
                                callback=partial(searchForObject,
                                                 x=-3.003071, y=-1.536944, z=0,
                                                 R=0, P=0.003176, Y=2.376887,
                                                 location='Bedroom',
                                                 ball = True,
                                                 color = "red",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
    
    
    
    
    ######### CUBOS RED #########
    
    entry = menu_handler.insert("Living_room", parent=entry_bluecube,
                                callback=partial(searchForObject,
                                                 x=1.536717, y=0.002346, z=0,
                                                 R=0, P=0.003185, Y=-1.565866,
                                                 location='Living_Room',
                                                 ball = False,
                                                 color = "blue",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
    
    entry = menu_handler.insert("Kitchen", parent=entry_bluecube,
                                callback=partial(searchForObject,
                                                 x=2.987402, y=0.553971, z=0,
                                                 R=0, P=0.003182, Y=-0.620476,
                                                 location='Kitchen',
                                                 ball = False,
                                                 color = "blue",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
        
    entry = menu_handler.insert("Bedroom", parent=entry_bluecube,
                                callback=partial(searchForObject,
                                                 x=-3.003071, y=-1.536944, z=0,
                                                 R=0, P=0.003176, Y=2.376887,
                                                 location='Bedroom',
                                                 ball = False,
                                                 color = "blue",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
    
    
    ############
    
    entry = menu_handler.insert("Living_room", parent=entry_redcube,
                                callback=partial(searchForObject,
                                                 x=1.536717, y=0.002346, z=0,
                                                 R=0, P=0.003185, Y=-1.565866,
                                                 location='Living_Room',
                                                 ball = False,
                                                 color = "red",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
    
    entry = menu_handler.insert("Kitchen", parent=entry_redcube,
                                callback=partial(searchForObject,
                                                 x=2.987402, y=0.553971, z=0,
                                                 R=0, P=0.003182, Y=-0.620476,
                                                 location='Kitchen',
                                                 ball = False,
                                                 color = "red",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))
        
    entry = menu_handler.insert("Bedroom", parent=entry_redcube,
                                callback=partial(searchForObject,
                                                 x=-3.003071, y=-1.536944, z=0,
                                                 R=0, P=0.003176, Y=2.376887,
                                                 location='Bedroom',
                                                 ball = False,
                                                 color = "red",
                                                 goal_publisher=goal_publisher,                                                
                                                 camera_listener=CameraListener6))



    
    ############################### Is someone home missions #######################


    # entry = menu_handler.insert("Is someone home?", parent=h_fourth_entry,
    #                             callback=partial(searchForPerson,
    #                                              goal_publisher=goal_publisher,
    #                                              camera_listener=CameraListener2))
    
        
    ############################### STORY TELLING #######################


    entry = menu_handler.insert("Tell a story", parent=h_sixth_entry,
                                callback=partial(storytelling,
                                                  goal_publisher=goal_publisher))
    

    
    
    makeMenuMarker("marker1")

    menu_handler.apply(server, "marker1")
    server.applyChanges()

    rospy.spin()


if __name__ == '__main__':
    main()