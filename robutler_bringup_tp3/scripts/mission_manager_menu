#!/usr/bin/env python3

from datetime import datetime
import rospy
from functools import partial
from interactive_markers.interactive_marker_server import *
from interactive_markers.menu_handler import *
from visualization_msgs.msg import *
from geometry_msgs.msg import Pose, Point, Quaternion, PoseStamped
from tf.transformations import quaternion_from_euler
from move_base_msgs.msg import MoveBaseActionResult
from std_msgs.msg import String, Header
import os
from rospkg import RosPack
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
import cv2
from visualization_msgs.msg import Marker


server = None
marker_pos = 1
menu_handler = MenuHandler()
h_first_entry = 0
h_second_entry = 0 ###
h_mode_last = 0

mission_text_markers = {
    'kitchen': {'marker': None, 'text_marker': None},
    'bedroom': {'marker': None, 'text_marker': None},
}

current_mission_marker = None

def enableCb(feedback):
    handle = feedback.menu_entry_id
    state = menu_handler.getCheckState(handle)

    if state == MenuHandler.CHECKED:
        menu_handler.setCheckState(handle, MenuHandler.UNCHECKED)
        rospy.loginfo("Hiding first menu entry")
        menu_handler.setVisible(h_first_entry, False)
    else:
        menu_handler.setCheckState(handle, MenuHandler.CHECKED)
        rospy.loginfo("Showing first menu entry")
        menu_handler.setVisible(h_first_entry, True)

    menu_handler.reApply(server)
    rospy.loginfo("update")
    server.applyChanges()


def modeCb(feedback):
    global h_mode_last
    menu_handler.setCheckState(h_mode_last, MenuHandler.UNCHECKED)
    h_mode_last = feedback.menu_entry_id
    menu_handler.setCheckState(h_mode_last, MenuHandler.CHECKED)

    rospy.loginfo("Switching to menu entry #" + str(h_mode_last))
    menu_handler.reApply(server)
    print("DONE")
    server.applyChanges()


def makeBox(msg):
    marker = Marker()

    marker.type = Marker.SPHERE
    marker.scale.x = msg.scale * 0.45
    marker.scale.y = msg.scale * 0.45
    marker.scale.z = msg.scale * 0.45
    marker.color.r = 0.5
    marker.color.g = 0.5
    marker.color.b = 0.5
    marker.color.a = 0.2

    return marker


def makeBoxControl(msg):
    control = InteractiveMarkerControl()
    control.always_visible = True
    control.markers.append(makeBox(msg))
    msg.controls.append(control)
    return control


def makeEmptyMarker(dummyBox=True):
    global marker_pos
    int_marker = InteractiveMarker()
    int_marker.header.frame_id = "base_link"
    int_marker.pose.position.z = marker_pos
    marker_pos += 1
    int_marker.scale = 1
    return int_marker


def makeMenuMarker(name):
    int_marker = makeEmptyMarker()
    int_marker.name = name

    control = InteractiveMarkerControl()

    control.interaction_mode = InteractiveMarkerControl.BUTTON
    control.always_visible = True

    control.markers.append(makeBox(int_marker))
    int_marker.controls.append(control)

    server.insert(int_marker)

def makeTextMarker(name, text, frame_id="base_link"):
    int_marker = InteractiveMarker()
    int_marker.header.frame_id = frame_id
    int_marker.name = name

    text_marker = Marker()
    text_marker.type = Marker.TEXT_VIEW_FACING
    text_marker.text = text
    text_marker.pose.position.z = 1.10 # Adjust the height of the text
    text_marker.scale.z = 0.3
    text_marker.color.r = 0.0
    text_marker.color.g = 0.0
    text_marker.color.b = 0.0
    text_marker.color.a = 1.0

    control = InteractiveMarkerControl()
    control.markers.append(text_marker)
    control.always_visible = True
    int_marker.controls.append(control)

    return int_marker, text_marker



def deepCb(feedback):
    rospy.loginfo("The deep sub-menu has been found.")


def updateMissionDescription(mission_name, mission_location, complete_message=None):
    global current_mission_marker

    # If a completion message is provided, display it
    if complete_message:
        # Remove the current mission text marker if exists
        if current_mission_marker:
            server.erase(current_mission_marker.name)
            server.applyChanges()

        # Create a new text marker for the completion message
        mission_text_marker_complete, _ = makeTextMarker("text_mission_complete", complete_message)
        mission_text_marker_complete.pose.position.z = 1.5  # Adjust the height of the completion message
        server.insert(mission_text_marker_complete)
        server.applyChanges()

        # Update the global variable
        current_mission_marker = mission_text_marker_complete
    else:
        # Remove the current mission text marker if exists
        if current_mission_marker:
            server.erase(current_mission_marker.name)
            server.applyChanges()

        # Create a new text marker for the mission description
        mission_text_marker, _ = makeTextMarker("text_mission_description", mission_name)
        mission_text_marker.pose.position.z = 1  # Adjust the height of the text

        # Insert the new mission text marker
        server.insert(mission_text_marker)
        server.applyChanges()

        # Update the global variable
        current_mission_marker = mission_text_marker

class CameraListener:
    def __init__(self,location):
        self.location=location
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/rgb/top_image_raw", Image, self.image_callback)
        self.image_saved = False

    def image_callback(self, data):
        if not self.image_saved:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                package_name = "robutler_bringup_tp3"
                rospack = RosPack()
                package_path = rospack.get_path(package_name)
                directory_path = os.path.join(package_path, "photos")                            
                
                timestamp = datetime.now()
                
                # Format timestamp
                timestamp_formatted = timestamp.strftime("%d-%m-%Y_%H-%M-%S")            
                
                file_name = f"Photo_of_{self.location}_{timestamp_formatted}.jpg"
                os.chdir(directory_path)
                cv2.imwrite(file_name, cv_image)
                rospy.loginfo("Image saved successfully as: " + file_name + ".")
                self.image_saved = True
                rospy.signal_shutdown("Foto completa. Término de função")
            except Exception as e:
                rospy.logerr("Error processing image: {}".format(e))


def takeAPicture(feedback, x, y, z, R, P, Y, location, goal_publisher, camera_listener):
    print('First, moving to ' + location)
    updateMissionDescription("Moving to the {} to take a picture".format(location), mission_location=location)
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal move to ' + location)
    goal_publisher.publish(ps)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=60)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    #UpdateMissionDescription("Mission complete!! Uff")
    print('move base completed goal with result ' + str(result_msg))

    
    # Initialize CameraListener within the takeAPicture function
    camera_listener_instance = camera_listener(location)

    complete_message = "Mission complete!! Uff"
    updateMissionDescription(complete_message, mission_location=location)
    # Wait for some time to ensure that the CameraListener has captured the image
    rospy.sleep(5)

    # Perform any additional processing or mission planning logic
    print("Mission planning logic after taking a picture.")

    # Optionally, signal shutdown
    rospy.signal_shutdown("Mission complete. Shutting down.")


def moveTo(feedback, x, y, z, R, P, Y, location, goal_publisher):
    print('Called moving to ' + location)
    updateMissionDescription("Moving to the {}".format(location), mission_location=location)
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal move to ' + location)
    goal_publisher.publish(ps)

    # TODO know when move is finished
    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=60)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    #updateMissionDescription("Mission complete!! Uff")
    print('move base completed goal with result ' + str(result_msg))
        
    complete_message = "Mission complete!! Uff"
    updateMissionDescription(complete_message, mission_location=location)


def main():
    global server

    # -------------------------------
    # Initialization
    # -------------------------------
    rospy.init_node("mission_manager")

    # Create move_base_simple/goal publisher
    goal_publisher = rospy.Publisher('/move_base_simple/goal', PoseStamped, queue_size=1)

    server = InteractiveMarkerServer("mission")
    print(server)

    global h_first_entry, h_mode_last
    h_first_entry = menu_handler.insert("Move to")
    h_second_entry = menu_handler.insert("Take a Picture")

    # mission_text_marker, mission_text_marker_marker = makeTextMarker("text_mission_description", "Mission: ")
    # mission_text_markers['mission_description'] = {'marker': mission_text_marker, 'text_marker': mission_text_marker_marker}
    # server.insert(mission_text_marker)


    entry = menu_handler.insert("kitchen", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=6.568593, y=-1.788789, z=0,
                                                 R=0, P=0, Y=-1.504141,
                                                 location='kitchen',
                                                 goal_publisher=goal_publisher))

    entry = menu_handler.insert("bedroom", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=-4.409525, y=-0.182006, z=0,
                                                 R=-0.000007, P=0.003198, Y=1.980398,
                                                 location='bedroom',
                                                 goal_publisher=goal_publisher))

    entry = menu_handler.insert("play_room", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=-4.962322, y=-2.987908, z=0,
                                                 R=-0.000007, P=0.003169, Y=-2.768683,
                                                 location='play_room',
                                                 goal_publisher=goal_publisher))
    
    entry = menu_handler.insert("living_room", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=2.250192, y=0.316127, z=0,
                                                 R=-0.000007, P=0.003170, Y=0.003170,
                                                 location='living_room',
                                                 goal_publisher=goal_publisher))

    entry = menu_handler.insert("kitchen_photo", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=0.865270, y=1.629331, z=0,
                                                 R=0, P=0.003169, Y=0.760267,
                                                 location='kitchen',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
  
    entry = menu_handler.insert("gym_photo", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=1.544719, y=0.655930, z=0,
                                                 R=0, P=0.003175, Y=1.103783,
                                                 location='gym',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
    entry = menu_handler.insert("bedroom_photo", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=-3.003071, y=-1.536944, z=0,
                                                 R=0, P=0.003176, Y=2.376887,
                                                 location='bedroom',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
    entry = menu_handler.insert("living_room_photo", parent=h_second_entry,
                                callback=partial(takeAPicture,
                                                 x=-3.538686, y=1.386727, z=0,
                                                 R=0, P=0.003170, Y=-2.197480,
                                                 location='living_room',
                                                 goal_publisher=goal_publisher,
                                                 camera_listener=CameraListener))
    makeMenuMarker("marker1")

    menu_handler.apply(server, "marker1")
    server.applyChanges()

    rospy.spin()


if __name__ == '__main__':
    main()